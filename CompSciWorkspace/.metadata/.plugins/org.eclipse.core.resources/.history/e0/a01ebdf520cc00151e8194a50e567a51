import java.util.Scanner;

public class RPCalculator {

	public static void main(String[] args) {
		boolean running = true;
		Scanner input = new Scanner(System.in);
		String userIn;
		String[] values;
		int x, y, ans;
		//loop allows user to perform calculations until they wish to quit.
		while (running == true) {
			//new List is created after every iteration of the loop(Is this inefficient?)
			GenStack<Integer> calculations = new GenStack();
			System.out.println("Enter a reverse polish expressions or \"quit\" to quit.");
			userIn = input.nextLine();
			//checks first for exit condition
			if (userIn.contains("quit")) {
				running = false;
				System.out.println("Good bye!");
				System.exit(0);
			} else {
				//input is trimmed and split by whitespace into the String array values
				userIn = userIn.trim();
				values = userIn.split(" ");
				//for loop will perform one of five functions for each value in the array
				for (int i = 0; i < values.length; i++) {
					//checks to make sure more than 2 values are push to the stack
					
					if (calculations.length() >= 2) {
						//case for multiplication
						if (values[i].equals("*")) {
							y = calculations.pop();
							x = calculations.pop();
							ans = x * y;
							calculations.push(ans);
						
						//case for division
						} else if (values[i].equals("/")) {
						y = calculations.pop();
						x = calculations.pop();
						//checks for division by 0
							if (y == 0) {
								System.out.println("Divison by 0!");
								break;
						}
						ans = x / y;
						calculations.push(ans);
						
						} else if (values[i].equals("+")) {
						if (calculations.length() >= 2) {
						y = calculations.pop();
						x = calculations.pop();
						ans = x + y;
						calculations.push(ans);
						
					} else if (values[i].equals("-")) {
						if (calculations.length() >= 2) {
						y = calculations.pop();
						x = calculations.pop();
						ans = x - y;
						calculations.push(ans);
						
					} else {
						try {
							calculations.push(Integer.parseInt(values[i]));
						} catch (NumberFormatException e) {
							System.out.println("Invalid input. Calculation aborted.");
							break;
						}
					}
					} else {
						System.out.println("Incorrectly formatted");
					}
				}
				if(calculations.length() == 1)
				{
					System.out.println("Result: " + calculations.pop());
				}
				else
				{
					System.out.println("Incorrect Format");
				}
			}
		}
	}
}
