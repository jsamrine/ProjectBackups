import java.applet.*;//Needed to create the window
import java.awt.*;//Needed for drawing
import java.util.*;

public class SierpinksiTriangle extends Applet {

	
	private Image display;// Used as the flat image
	private Graphics drawingArea;// Used to draw item in the image


	public void init() {
		
		//gets the he 
		double root = (getSize().width / 2) * ((Math.sqrt(3)));

		// int height = (int) root;

		int width = getSize().width;
		int height = getSize().height;
		// Creates an image using the height and width in the applet
		display = createImage(width, height);
		// Sets up the drawing area for the image above to be drawn on
		drawingArea = display.getGraphics();
		// This draws the random fractal
		// double root = (getSize().width/2)*((Math.sqrt(3)));

		height = (int) root;
		int[] x = { 0, width / 2, width };
		int[] y = { height, 0, height };
		drawTriangle(x, y, width, drawingArea);
		x[0] = x[2] / 4;
		x[1] = x[2] / 2;
		x[2] = (x[2] * 3 / 4);
		for (int i = 0; i < 2; i++)
			System.out.println(x[i]);
		int tmp = y[0];
		y[0] = y[0] / 2;
		y[1] = tmp;
		y[2] = (y[2] / 2);
		drawSieve(x, y, width, drawingArea);

	}

	/*
	 * This updates every frame and draws the image in the applet. This is also
	 * called by the applet as it is an overridden method.
	 
	public void paint(Graphics g) {
		g.drawImage(display, 0, 0, null);
	}
*/
	public void drawTriangle(int[] x, int[] y, int width, Graphics g) {
		g.fillPolygon(x, y, 3);
	}

	public static void drawSieve(int[] x, int[] y, int side, Graphics g) {
		// Divides each side by 2. Since it's a square we only need to calculate
		// this once
		int sub = side / 3;

		// Draws the middle square. The square is drawn from the top left
		// position to a specified width and height.

		// g.fillRect(x+sub, y+sub, sub, sub);
		// Graphics g2 = display.getGraphics();
		g.setColor(Color.white);
		g.fillPolygon(x, y, 3);
		// If it hasn't reached the pixel limit the call the function
		// recursively on the 8 remaining squares.
		if (sub >= 4) {
			// Top Triangle
			// top
			drawSieve(
					new int[] { (x[0] + x[1]) / 2 + (x[1] - x[2]) / 2, (x[0] + x[1]) / 2 + (x[0] - x[2]) / 2,
							(x[0] + x[1]) / 2 },
					new int[] { (y[0] + y[1]) / 2 + (y[1] - y[2]) / 2, (y[0] + y[1]) / 2 + (y[0] - y[2]) / 2,
							(y[0] + y[1]) / 2 },
					sub, g); // Left

			// left
			// drawGasket(x, y+sub,sub,g); //Left
			drawSieve(
					new int[] { (x[2] + x[1]) / 2 + (x[1] - x[0]) / 2, (x[2] + x[1]) / 2 + (x[2] - x[0]) / 2,
							(x[2] + x[1]) / 2 },
					new int[] { (y[2] + y[1]) / 2 + (y[1] - y[0]) / 2, (y[2] + y[1]) / 2 + (y[2] - y[0]) / 2,
							(y[2] + y[1]) / 2 },
					sub, g);
			// right
			// drawGasket(x,y+2*sub,sub,g); //Left
			drawSieve(
					new int[] { (x[0] + x[2]) / 2 + (x[2] - x[1]) / 2, (x[0] + x[2]) / 2 + (x[0] - x[1]) / 2,
							(x[0] + x[2]) / 2 },
					new int[] { (y[0] + y[2]) / 2 + (y[2] - y[1]) / 2, (y[0] + y[2]) / 2 + (y[0] - y[1]) / 2,
							(y[0] + y[2]) / 2 },
					sub, g);
			// y[1]/2, (y[2])}, sub, g); //Left
		}
	}
}
