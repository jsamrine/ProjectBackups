import java.util.ArrayList;

public class Graph {
	private class Vertex {
		String name;
		ArrayList<Edge> neighbors;

		public Vertex(String aName) {
			this.name = aName;
			this.neighbors = new ArrayList<Edge>();
		}

		public String getName() {
			return name;
		}

		public void setName(String name) {
			this.name = name;
		}
	}

	private class Edge {
		Vertex nextVert;
		double weight;

		public Edge(Vertex aV1, double aWeight) {
			nextVert = aV1;
			weight = aWeight;
		}

		public Vertex getNextVert() {
			return nextVert;
		}

		public void setNextVert(Vertex nextVert) {
			this.nextVert = nextVert;
		}
	}

	private Vertex origin;
	private ArrayList<Vertex> vertices;
	private ArrayList<Vertex> markedVerts;
	private ArrayList<Vertex> visitedVerts;
	private ArrayList<Edge> traversed;
	private double maxLength;

	public Graph(double aLength) {
		origin = null;
		vertices = new ArrayList<Vertex>();
		markedVerts = new ArrayList<Vertex>();
		visitedVerts = new ArrayList<Vertex>();
		traversed = new ArrayList<Edge>();
		maxLength = aLength;
	}

	// vertexes have edges linking them to other vertexes
	public void addVertex(String aName) {
		// checks graph to see if a duplicate vertex already exists
		if (!isContained(aName)) {
			Vertex v = new Vertex(aName);
			vertices.add(v);
			if (origin == null) {
				origin = v;
			}
		}

	}

	public boolean isContained(String aName) {
		for (Vertex vert : vertices) {
			// checks for a matching name, returning true if a match is found
			if (vert.name.equals(aName)) {
				return true;
			}
		}
		return false;
	}

	public void addEdge(String fromVert, String toVert, double weight) {
		// two local variables find vertexes in the graph with matching names
		Vertex v1 = getVertex(fromVert);
		Vertex v2 = getVertex(toVert);
		// checks to make sure vertexes are initialized
		if (v1 == null || v2 == null) {
			return;
		}
		v1.neighbors.add(new Edge(v2, weight));
		v2.neighbors.add(new Edge(v1, weight));
	}

	public Vertex getVertex(String aName) {
		// similar to the isContained method, this searches for each vertex in
		// the arraylist
		// with a name that matches aName, returning a vertex
		for (Vertex vert : vertices) {
			if (vert.name.equals(aName)) {
				return vert;
			}
		}
		return null;
	}

	public void printDFS() {
		// deletes all indexes in the markedVerts array
		markedVerts.clear();
		// calls helper method
		printDFS(origin);
	}

	public void printDFS(Vertex aVert) {
		// if current vertex has been visited/marked, method returns
		if (markedVerts.contains(aVert)) {
			return;
		}
		// prints out current vertex's name and adds it to the list of marked
		// vertexes
		System.out.println(aVert.name);
		markedVerts.add(aVert);
		// printdfs is called for each edge the vertex has
		for (Edge edge : aVert.neighbors) {
			printDFS(edge.nextVert);
		}
	}

	public void printBFS() {
		// clears all arraylists
		markedVerts.clear();
		visitedVerts.clear();
		// prints root and calls helper method
		System.out.println(origin.name);
		printBFS(origin);
	}

	public void printBFS(Vertex vert) {
		// checks if printed or not
		if (markedVerts.contains(vert)) {
			return;
		}
		// vertex is marked
		markedVerts.add(vert);

		for (Edge edge : vert.neighbors) {
			// for each edge, if it has not been marked or visited, the name is
			// printed
			// the next vertex of each edge is marked as visited
			if (!visitedVerts.contains(edge.nextVert) || !markedVerts.contains(vert)) {
				System.out.println(edge.nextVert.name);
				visitedVerts.add(edge.nextVert);
			}

		}
		// for each edge in the current vertex's list of neighbors, the printBFS
		// method is called
		for (Edge edge : vert.neighbors) {
			printBFS(edge.nextVert);
		}
	}

	public void traverse(String v1, String v2) {
		Vertex V1, V2;
		if (!vertices.contains(v1) || !vertices.contains(v2)) {
			return;
		}

		V1 = getVertex(v1);
		V2 = getVertex(v2);
		Edge E = getEdge(V1, V2);
		if (E != null)
			traversed.add(E);

	}

	public Edge getEdge(Vertex from, Vertex to) {
		//Vertex V1 = getVertex(from);
		//Vertex V2 = getVertex(to);
		for (Edge edge : V1.neighbors) {
			if (edge.nextVert == V2) {
				return edge;
			}
		}
		return null;
	}

	public void strollAroundKoningsburg() {
		for (Vertex v : vertices) {
			traversed.clear();
			markedVerts.clear();
			visitedVerts.clear();

			if (!v.getName().equals("v4")) {
				System.out.println(v.name);
				startFrom(v);
			}
		}
	}

	public void startFrom(Vertex vert) {
		// checks if printed or not
		if (markedVerts.contains(vert)) {
			return;
		}
		// vertex is marked

		for (Edge edge : vert.neighbors) {
			// for each edge, if it has not been marked or visited, the name is
			// printed
			// the next vertex of each edge is marked as visited
			if (!traversed.contains(edge)) {
				traverse(vert.name, edge.nextVert.name);
				System.out.println(edge.nextVert.name);
				startFrom(edge.nextVert);
			}
		}
		// for each edge in the current vertex's list of neighbors, the printBFS
		// method is called
		/*
		 * for (Edge edge : vert.neighbors) { printBFS(edge.nextVert); }
		 */
	}
}
