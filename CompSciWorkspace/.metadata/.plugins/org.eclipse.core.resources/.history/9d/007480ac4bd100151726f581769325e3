import java.applet.*;//Needed to create the window
import java.awt.*;//Needed for drawing
import java.util.*;

public class SierpinksiTriangle extends Applet {

	private Image display;// Used as the flat image
	private Graphics drawingArea;// Used to draw item in the image

	public void init() {

		// gets the he
		double root = (getSize().width / 2) * ((Math.sqrt(3)));

		// int height = (int) root;

		int width = getSize().width;
		int height = getSize().height;
		// Creates an image using the height and width in the applet
		display = createImage(width, height);
		// Sets up the drawing area for the image above to be drawn on
		drawingArea = display.getGraphics();

		height = (int) root;
		// these set the coordinates for the black triangle
		int[] x = { 0, width / 2, width };
		int[] y = { height, 0, height };
		// draws the black
		drawTriangle(x, y, width, drawingArea);
		//takes coordinates for the new recursive triangles by using midpoint formula
		//Similiar equations are used for the three recursive triangle calls
		drawSieve(new int[] { (x[0] + x[1]) / 2, (x[2] + x[0]) / 2, (x[2] + x[1]) / 2 },
				new int[] { (y[0] + y[1]) / 2, (y[2] + y[0]) / 2, (y[2] + y[1]) / 2 }, width, drawingArea);

	}

	public void paint(Graphics g) {
		g.drawImage(display, 0, 0, null);
	}

	public void drawTriangle(int[] x, int[] y, int width, Graphics g) {
		g.fillPolygon(x, y, 3);
	}

	public static void drawSieve(int[] x, int[] y, int side, Graphics g) {
		// Divides each side by 2. Since it's a square we only need to calculate
		// this once
		int sub = side / 3;

		g.setColor(Color.white);
		g.fillPolygon(x, y, 3);
		// If it hasn't reached the pixel limit the call the function
		// recursively on the 3 triangles.
		if (sub >= 4) {

			// Triangle1

			drawSieve(
					new int[] { (x[0] + x[1]) / 2 + (x[1] - x[2]) / 2, (x[0] + x[1]) / 2 + (x[0] - x[2]) / 2,
							(x[0] + x[1]) / 2 },
					new int[] { (y[0] + y[1]) / 2 + (y[1] - y[2]) / 2, (y[0] + y[1]) / 2 + (y[0] - y[2]) / 2,
							(y[0] + y[1]) / 2 },
					sub, g); // Left

			// Triangle2

			drawSieve(
					new int[] { (x[2] + x[1]) / 2 + (x[1] - x[0]) / 2, (x[2] + x[1]) / 2 + (x[2] - x[0]) / 2,
							(x[2] + x[1]) / 2 },
					new int[] { (y[2] + y[1]) / 2 + (y[1] - y[0]) / 2, (y[2] + y[1]) / 2 + (y[2] - y[0]) / 2,
							(y[2] + y[1]) / 2 },
					sub, g);
			// Triangle3

			drawSieve(
					new int[] { (x[0] + x[2]) / 2 + (x[2] - x[1]) / 2, (x[0] + x[2]) / 2 + (x[0] - x[1]) / 2,
							(x[0] + x[2]) / 2 },
					new int[] { (y[0] + y[2]) / 2 + (y[2] - y[1]) / 2, (y[0] + y[2]) / 2 + (y[0] - y[1]) / 2,
							(y[0] + y[2]) / 2 },
					sub, g);
		}
	}
}
