import java.applet.*;//Needed to create the window
import java.awt.*;//Needed for drawing
import java.util.*;

public class SierpinksiTriangle extends Applet{

		//When it extends applet it creates a window and calls certain methods
			private Image display;//Used as the flat image
			private Graphics drawingArea;//Used to draw item in the image
			/*
			 *This is called by the parent Applet, as its an overridden method, and it initializes all of the instance variables.
			 * Think of this as a variation of a constructor, but called by another, hidden piece of code
			 */
			public void init()
			{
				//get the height and width from the Applet
				//tan60
				double root = (getSize().width/2)*((Math.sqrt(3)));
				
				int height = (int) root;
				
				int width = getSize().width;
				int height = getSize().height
				//Creates an image using the height and width in the applet
				display = createImage(width,height);
				//Sets up the drawing area for the image above to be drawn on
				drawingArea = display.getGraphics();
				//This draws the random fractal
				//double root = (getSize().width/2)*((Math.sqrt(3)));
				
				height = (int) root;
				int[] x = {0, width/2, width}; 
				int[] y = {height, 0, height}; 
				drawSieve(x,y,height,drawingArea);
				
			}
			/*
			 * This updates every frame and draws the image in the applet.  This is also called by
			 * the applet as it is an overridden method. 
			 */
			public void paint(Graphics g)
			{
				g.drawImage(display,0,0,null);
			}
			public void drawTriangle(Graphics g)
			{
			//	g.fillPolygon(new int[] {10, 20, 30}, new int[] {10, 20, 30}, 3);
			}
			/*
			 * This creates the carpet by first dividing the square into 9 squares.  Then fills in the center square.
			 * Finally is recursively called on the 8 other squares until a pixel limit is reached.
			 */
			public static void drawSieve(int[] x, int[] y, int side, Graphics g)
			{
				//Divides each side by 2.  Since it's a square we only need to calculate this once
				int sub = side / 2;
				
				//Draws the middle square.  The square is drawn from the top left position to a specified width and height.
				g.fillPolygon(x, y, 3);
				//g.fillRect(x+sub, y+sub, sub, sub);
				
				//If it hasn't reached the pixel limit the call the function recursively on the 8 remaining squares.
				if(sub >= 4)
				{
					//Top Triangle
					//top 
					//drawSieve(); //Left
									
					//left
					//drawGasket(x, y+sub,sub,g); //Left
									
					//right
					//drawGasket(x,y+2*sub,sub,g); //Left
				}
			}
}
